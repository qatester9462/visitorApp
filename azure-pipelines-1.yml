trigger:
- none

pool:
  vmImage: ubuntu-latest


variables:
  - group: TestingBotSecrets  # Contains TB_KEY and TB_SECRET

steps:
# ✅ Diagnostic step (optional)
- script: |
    echo "TB_KEY: $(TB_KEY)"
    echo "TB_SECRET: $(TB_SECRET)"
    curl -I https://hub.testingbot.com/wd/hub/status
  displayName: "Verify TestingBot connection"

# ✅ Install dependencies
- script: |
    npm install -g appium appium-doctor
    appium-doctor
    npm install
    npm install --save-dev mochawesome mochawesome-merge mochawesome-report-generator @wdio/junit-reporter
  displayName: 'Install Appium & Dependencies'

# ✅ Run Android Tests (SignIn only)
- script: |
    echo "Running Android Test..."
    export PLATFORM=Android
    export DEVICE_NAME='Galaxy S21'
    export PLATFORM_VERSION='11'
    export APP='tb://e2805e53f292667f4c22fe21'  # ✅ Replace with your real .apkk TestingBot ID
    npx wdio run wdio.testingbot.conf.js
  env:
    TB_KEY: $(TB_KEY)
    TB_SECRET: $(TB_SECRET)
    NODE_OPTIONS: --dns-result-order=ipv4first
  displayName: 'Run Android SignIn Tests'
  

  # ✅ Publish JUnit results to Azure DevOps Tests tab (assuming mocha-junit-reporter is configured)
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test-results/junit/*.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'VisitorApp-Appium Android Test Results'
  condition: succeededOrFailed()
  displayName: 'Publish JUnit Test Results'

# ✅ Publish Mochawesome HTML report as artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'mochawesome-report'
    ArtifactName: 'MochawesomeReport'
    publishLocation: 'Container'
  condition: succeededOrFailed()
  displayName: 'Publish Mochawesome Report Artifact'

